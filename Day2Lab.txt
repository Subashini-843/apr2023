
Lab 8 - Modify Sender to have for loop of 10 items
	Change make call to pass size as 5
	Modify receive to write range  -> infinite for
	func receiver(ch chan string){
		fmt.Println("Waiting for channel input")
	//	for _, _ = range <-ch{
		for {
			s := <- ch
			fmt.Println(".......Got ", s, " on channel ")
		 }
	}
-------
	package main
	import (
		"time"
		"fmt"
		"strconv"
	)
	func main(){
		c := make(chan string,10)
		go sender(c)
		go receiver(c)
		time.Sleep(20 * time.Second)
		fmt.Println("main Over")

	}
	func receiver(ch chan string){
		fmt.Println("Waiting for channel input")
		for _, _ = range <-ch{
			s := <-ch
			fmt.Println(".......Got ", s, " on channel ")
		}

	}
	func sender(ch chan string){
		for i:=0;i<10;i++{
			fmt.Println("Sending str",i," to channel")
			ch <- "str"+strconv.Itoa(i)
			fmt.Println("Finished sending str",i," to channel")
		}
	}

Lab 7 - channel 
	package main
	import (
		"time"
		"fmt"
	)
	func main(){

		c := make(chan string)
		go sender(c)
		go receiver(c)
		time.Sleep(10 * time.Second)
		fmt.Println("main Over")

	}
	func receiver(ch chan string){
		fmt.Println("Waiting for channel input")
		s := <-ch
		fmt.Println("Got ", s, " on channel ")

	}
	func sender(ch chan string){
		fmt.Println("Sending str1 to channel")
		ch <- "str1"
		fmt.Println("Finished sending str1 to channel")
	/*	fmt.Println("Sending str2 to channel")
		ch <- "str2"
		fmt.Println("Finished sending str2 to channel")*/
	}

time.Sleep(time.Duration(rand.Int()%100) * time.Millisecond)
Lab6 - Three different go routines as Option1(Delhi), 2(Blr) and 3(Hyd)
            Whichever go routine finishes first should be chosen option.
            use math library to generate random sleep. 
            
            package main
            import (
                        "time"
            //	"math/rand"
                        "fmt"
            )
            var finalcity = ""
            func main(){
                        fmt.Println("start of main")
                        go helper("Delhi")
                        go helper("Hyd")
                        go helper("Blr")

                        fmt.Println("end of main")
                        time.Sleep(20 * time.Second)
                        fmt.Println("main - Final Destination Choosen is " , finalcity)
            }
            func helper(str string){
                        for i:=1;i<10;i++{
                                    fmt.Print(str," ",i)
                                    time.Sleep(100 * time.Millisecond)
                        }
                        if finalcity==""{
                                    finalcity = str
                                    fmt.Println("Final CIty is  " , finalcity)
                        }

            }


Lab5 -  Go Routines 
        demo2/Lab1.go 
            package main
            import "fmt"
            func main(){
                        fmt.Println("start of main")
                        go helper("-")
                        go helper("*")

                        fmt.Println("end of main")
                        for{}
            }
            func helper(str string){
                        for i:=1;i<10000;i++{
                               fmt.Print(str," ")
                        }
            }
Lab4 - Create two Structures
            2DPoint (X, Y)
            3DPoint (X, Y, Z)
       interface Modify {
            Add(int)
            }
       implement Modify for 2DPoint and 3DPoint 
       Ask user choise of 2D/3D and using interface invoke add(5) 
       
Lab3 - package main
      import "fmt"
      type Myinterface interface{
            Shift() 
      }
      type Point struct{
            X int
            Y int
      }
      func (pt Point) Shift(){
            fmt.Println("Shift invoked ..")
      }
      func main() {
            p1 := Point{10,10}
            fmt.Println(p1)
            var myinterface Myinterface
            myinterface = p1
            myinterface.Shift()
      }
Lab2 - panic/recover
      package main

      import "fmt"

      func main() {
            defer fmt.Println("in main defer line 1")
            fmt.Println("starting of main")
            test(4)
            fmt.Println("after test")
      }
      func test(i int) {
            defer func() {
                  if r := recover(); r != nil {
                        fmt.Println("Recovered in f", r)
                  }
            }()
            defer fmt.Println("Defer in g", i)
            if i > 3 {
                  fmt.Println("Panicking!")
                  panic(fmt.Sprintf("%v", i))
            }
            fmt.Println("Printing in g ", i)
            //	   g(i + 1)
      }

Lab1 - Day2/demo1/Lab1.go - closures
      package main
      import "fmt"

      func adder() func(int) int {
        sum := 0
        fmt.Println("adder function invoked ...")
        return func(x int) int {
          sum += x
          fmt.Println("in return function with ", x , " and current sum is " , sum)
          return sum
        }
      }
      func main(){
        fn1 := adder()
        fn1(10)
        fn1(11)

      }
